AK8S-08 Deploying Kubernetes Engine via Helm Charts


Overview
In this lab, you use a Helm chart to deploy a full Kubernetes solution.

Objectives
In this lab, you learn how to perform the following tasks:

Use kubectl to build and manipulate GKE clusters

Use Helm charts to deploy a Kubernetes solution

Task 0. Lab Setup
Sign in to the Google Cloud Platform (GCP) Console
For each lab, you get a new GCP project and set of resources for a fixed time at no cost.

Make sure you signed into Qwiklabs using an incognito window.

Note the lab's access time (for example, img/time.png and make sure you can finish in that time block.

There is no pause feature. You can restart if needed, but you have to start at the beginning.

When ready, click img/start_lab.png.

Note your lab credentials. You will use them to sign in to Cloud Platform Console.

Activate Google Cloud Shell
Google Cloud Shell is a virtual machine that is loaded with development tools. 

In GCP console, on the top right toolbar, click the Open Cloud Shell button.

Task 1. Use Helm charts to deploy GKE clusters
In this task, you use Helm charts to deploy Kubernetes Engine clusters.

Typical Kubernetes systems consist of many different resources. Though you could maintain configuration files for each of these resources, 
managing versions of different resources and compatibility among those versions can be difficult. 
Helm is a popular tool used with Kubernetes for packaging resources.


Task 2. Create a deployment manifest for a Pod inside the cluster
Create a GKE cluster
1. In Cloud Shell, type the following command to set the environment variable for the zone and cluster name.

export my_zone=us-central1-a
export my_cluster=standard-cluster-1

2. Configure kubectl tab completion in Cloud Shell.

source <(kubectl completion bash)

3. In Cloud Shell, type the following command to create a Kubernetes cluster.

gcloud container clusters create $my_cluster --num-nodes 3  --enable-ip-alias --zone $my_zone

4. In Cloud Shell, configure access to your cluster for the kubectl command-line tool, using the following command:

gcloud container clusters get-credentials $my_cluster --zone $my_zone

# Download the Helm binary, deploy a Helm Chart
You download helm, configure admin and service accounts and then initialize Helm for your Kubernetes cluster.

1.Execute the following command to download the Helm installation shell script.

curl -LO https://git.io/get_helm.sh
Note: You can find information on this, and other methods, for installing Helm on the Helm installation page, https://helm.sh/docs/using_helm/#installing-helm.

2. Make the installation script executable.

chmod 700 get_helm.sh
3. Execute the Helm installation script.

./get_helm.sh
4. Ensure your user account has the cluster-admin role in your cluster.

kubectl create clusterrolebinding user-admin-binding \
   --clusterrole=cluster-admin \
   --user=$(gcloud config get-value account)
5. Create a Kubernetes service account that is Tiller - the server side of Helm, can be used for deploying charts.

kubectl create serviceaccount tiller --namespace kube-system
6. Grant the Tiller service account the cluster-admin role in your cluster:

kubectl create clusterrolebinding tiller-admin-binding \
   --clusterrole=cluster-admin \
   --serviceaccount=kube-system:tiller
7. Execute the following commands to initialize Helm using the service account.

helm init --service-account=tiller

8. Execute the following commands to update the Helm repositories.

helm repo update
9. In Cloud Shell, execute the following command to verify the Helm installation and configuration:

helm version
The output should look like the example.

Output (do not copy)

Client: &version...{SemVer:"v2.16.6", GitCommit:"be3...State:"clean"}
Server: &version...{SemVer:"v2.16.6", GitCommit:"be3...State:"clean"}

10. Execute the following command to deploy a set of resources to create a Redis service on the active context cluster:

helm install stable/redis
A Helm chart is a package of resource configuration files, along with configurable parameters. This single command deployed a collection of resources.

11. A Kubernetes Service defines a set of Pods and a stable endpoint by which network traffic can access them. 
In Cloud Shell, execute the following command to view Services that were deployed through the Helm chart:

kubectl get services
The output should look like the example.

Output (do not copy)

NAME                  TYPE       CLUSTER-IP    EXTERNAL-IP  PORT(S)   AGE
zinc-...redis-master  ClusterIP  10.11.244.2   <none>       6379/TCP  26s
zinc-...redis-slave   ClusterIP  10.11.240.101 <none>       6379/TCP  26s
kubernetes            ClusterIP  10.11.240.1   <none>       443/TCP   10m

12. A Kubernetes StatefulSet manages the deployment and scaling of a set of Pods, and provides guarantees about the ordering and uniqueness of these Pods. 
In Cloud Shell, execute the following commands to view a StatefulSet that was deployed through the Helm chart:

kubectl get statefulsets
The output should look like the example.

Output (do not copy)

NAME                             READY   AGE
zinc-leopard-redis-master          0/1   1m

13. A Kubernetes ConfigMap lets you storage and manage configuration artifacts, so that they are decoupled from container-image content. 
In Cloud Shell, execute the following commands to view ConfigMaps that were deployed through the Helm chart:

kubectl get configmaps
The output should look like the example.

Output (do not copy)

NAME                             DATA      AGE
zinc-leopard-redis                3         2m
zinc-leopard-redis-health         3         2m

14. A Kubernetes Secret, like a ConfigMap, lets you store and manage configuration artifacts, 
but it's specially intended for sensitive information such as passwords and authorization keys. 
In Cloud Shell, execute the following commands to view some of the Secret that was deployed through the Helm chart:

kubectl get secrets
The output should look like the example.

Output (do not copy)

NAME                     TYPE                                 DATA    AGE
default-token-vl8bh      kubernetes.io/service-account-token  3       12m
zinc-leopard-redis       Opaque                               1       3m
15. You can inspect the Helm chart directly using the following command:

helm inspect stable/redis
16. If you want to see the templates that the Helm chart deploys you can use the following command:

helm install stable/redis --dry-run --debug
# Test Redis functionality
You store and retrieve values in the new Redis deployment running in your Kubernetes Engine cluster.

1. Execute the following command to store the service ip-address for the Redis cluster in an environment variable.

export REDIS_IP=$(kubectl get services -l app=redis -o json | jq -r '.items[].spec | select(.selector.role=="master")' | jq -r '.clusterIP')
2. Retrieve the Redis password and store it in an environment variable.

export REDIS_PW=$(kubectl get secret -l app=redis -o jsonpath="{.items[0].data.redis-password}"  | base64 --decode)
3. Display the Redis cluster address and password.

echo Redis Cluster Address : $REDIS_IP
echo Redis auth password   : $REDIS_PW
4. Open an interactive shell to a temporary Pod, passing in the cluster address and password as environment variables.

kubectl run redis-test --rm --tty -i --restart='Never' \
    --env REDIS_PW=$REDIS_PW \
    --env REDIS_IP=$REDIS_IP \
    --image docker.io/bitnami/redis:4.0.12 -- bash
5. Connect to the Redis cluster.

redis-cli -h $REDIS_IP -a $REDIS_PW
6. Set a key value.

set mykey this_amazing_value
This will display OK if successful.

7.  Retrieve the key value.

get mykey
This will return the value you stored indicating that the Redis cluster can successfully store and retrieve data.

End your lab